// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: libfuzzer_example.proto

#include "libfuzzer_example.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace libfuzzer_example {
PROTOBUF_CONSTEXPR Msg::Msg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.optional_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.any_)*/nullptr
  , /*decltype(_impl_.optional_uint64_)*/uint64_t{0u}
  , /*decltype(_impl_.optional_float_)*/0} {}
struct MsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgDefaultTypeInternal() {}
  union {
    Msg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgDefaultTypeInternal _Msg_default_instance_;
}  // namespace libfuzzer_example
static ::_pb::Metadata file_level_metadata_libfuzzer_5fexample_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_libfuzzer_5fexample_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_libfuzzer_5fexample_2eproto = nullptr;

const uint32_t TableStruct_libfuzzer_5fexample_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::libfuzzer_example::Msg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::libfuzzer_example::Msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::libfuzzer_example::Msg, _impl_.optional_float_),
  PROTOBUF_FIELD_OFFSET(::libfuzzer_example::Msg, _impl_.optional_uint64_),
  PROTOBUF_FIELD_OFFSET(::libfuzzer_example::Msg, _impl_.optional_string_),
  PROTOBUF_FIELD_OFFSET(::libfuzzer_example::Msg, _impl_.any_),
  3,
  2,
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::libfuzzer_example::Msg)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::libfuzzer_example::_Msg_default_instance_._instance,
};

const char descriptor_table_protodef_libfuzzer_5fexample_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027libfuzzer_example.proto\022\021libfuzzer_exa"
  "mple\032\031google/protobuf/any.proto\"r\n\003Msg\022\026"
  "\n\016optional_float\030\001 \001(\002\022\027\n\017optional_uint6"
  "4\030\002 \001(\004\022\027\n\017optional_string\030\003 \001(\t\022!\n\003any\030"
  "\004 \001(\0132\024.google.protobuf.Any"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_libfuzzer_5fexample_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::_pbi::once_flag descriptor_table_libfuzzer_5fexample_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_libfuzzer_5fexample_2eproto = {
    false, false, 187, descriptor_table_protodef_libfuzzer_5fexample_2eproto,
    "libfuzzer_example.proto",
    &descriptor_table_libfuzzer_5fexample_2eproto_once, descriptor_table_libfuzzer_5fexample_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_libfuzzer_5fexample_2eproto::offsets,
    file_level_metadata_libfuzzer_5fexample_2eproto, file_level_enum_descriptors_libfuzzer_5fexample_2eproto,
    file_level_service_descriptors_libfuzzer_5fexample_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_libfuzzer_5fexample_2eproto_getter() {
  return &descriptor_table_libfuzzer_5fexample_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_libfuzzer_5fexample_2eproto(&descriptor_table_libfuzzer_5fexample_2eproto);
namespace libfuzzer_example {

// ===================================================================

class Msg::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Msg, _impl_._has_bits_);
  static void set_has_optional_float(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_optional_uint64(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_optional_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Any& any(const Msg* msg);
  static void set_has_any(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Any&
Msg::_Internal::any(const Msg* msg) {
  return *msg->_impl_.any_;
}
void Msg::clear_any() {
  if (_impl_.any_ != nullptr) _impl_.any_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Msg::Msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:libfuzzer_example.Msg)
}
Msg::Msg(const Msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Msg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.optional_string_){}
    , decltype(_impl_.any_){nullptr}
    , decltype(_impl_.optional_uint64_){}
    , decltype(_impl_.optional_float_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.optional_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optional_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_optional_string()) {
    _this->_impl_.optional_string_.Set(from._internal_optional_string(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_any()) {
    _this->_impl_.any_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.any_);
  }
  ::memcpy(&_impl_.optional_uint64_, &from._impl_.optional_uint64_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.optional_float_) -
    reinterpret_cast<char*>(&_impl_.optional_uint64_)) + sizeof(_impl_.optional_float_));
  // @@protoc_insertion_point(copy_constructor:libfuzzer_example.Msg)
}

inline void Msg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.optional_string_){}
    , decltype(_impl_.any_){nullptr}
    , decltype(_impl_.optional_uint64_){uint64_t{0u}}
    , decltype(_impl_.optional_float_){0}
  };
  _impl_.optional_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optional_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Msg::~Msg() {
  // @@protoc_insertion_point(destructor:libfuzzer_example.Msg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Msg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.optional_string_.Destroy();
  if (this != internal_default_instance()) delete _impl_.any_;
}

void Msg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Msg::Clear() {
// @@protoc_insertion_point(message_clear_start:libfuzzer_example.Msg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.optional_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.any_ != nullptr);
      _impl_.any_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.optional_uint64_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.optional_float_) -
        reinterpret_cast<char*>(&_impl_.optional_uint64_)) + sizeof(_impl_.optional_float_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float optional_float = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_optional_float(&has_bits);
          _impl_.optional_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 optional_uint64 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_optional_uint64(&has_bits);
          _impl_.optional_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string optional_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_optional_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "libfuzzer_example.Msg.optional_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Any any = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_any(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:libfuzzer_example.Msg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float optional_float = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_optional_float(), target);
  }

  // optional uint64 optional_uint64 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_optional_uint64(), target);
  }

  // optional string optional_string = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_optional_string().data(), static_cast<int>(this->_internal_optional_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "libfuzzer_example.Msg.optional_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_optional_string(), target);
  }

  // optional .google.protobuf.Any any = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::any(this),
        _Internal::any(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libfuzzer_example.Msg)
  return target;
}

size_t Msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libfuzzer_example.Msg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string optional_string = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_optional_string());
    }

    // optional .google.protobuf.Any any = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.any_);
    }

    // optional uint64 optional_uint64 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_optional_uint64());
    }

    // optional float optional_float = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Msg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg::GetClassData() const { return &_class_data_; }


void Msg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Msg*>(&to_msg);
  auto& from = static_cast<const Msg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:libfuzzer_example.Msg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_optional_string(from._internal_optional_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_any()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
          from._internal_any());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.optional_uint64_ = from._impl_.optional_uint64_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.optional_float_ = from._impl_.optional_float_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg::CopyFrom(const Msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libfuzzer_example.Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg::IsInitialized() const {
  return true;
}

void Msg::InternalSwap(Msg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optional_string_, lhs_arena,
      &other->_impl_.optional_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg, _impl_.optional_float_)
      + sizeof(Msg::_impl_.optional_float_)
      - PROTOBUF_FIELD_OFFSET(Msg, _impl_.any_)>(
          reinterpret_cast<char*>(&_impl_.any_),
          reinterpret_cast<char*>(&other->_impl_.any_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_libfuzzer_5fexample_2eproto_getter, &descriptor_table_libfuzzer_5fexample_2eproto_once,
      file_level_metadata_libfuzzer_5fexample_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace libfuzzer_example
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::libfuzzer_example::Msg*
Arena::CreateMaybeMessage< ::libfuzzer_example::Msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::libfuzzer_example::Msg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
